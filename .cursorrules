# Diamond Chess Project - Cursor Rules

## Project Architecture

This is a completed Diamond Chess web application built with Next.js 14 App Router, Material-UI v5, Firebase/Firestore, and NextAuth.js v5. The project features real-time multiplayer chess with a unique 45¬∞ diamond board orientation, stunning animations, and a polished user experience.

## Component Guidelines

### Size & Structure

- Keep components under 400 lines of code - abstract into sub-components when approaching this limit
- Break complex components into logical sub-components with clear responsibilities
- Use meaningful component names that describe their purpose (e.g., `DiamondBoard`, `PlayerCard`, `MoveHistory`)

### Material-UI Best Practices

- Always use Material-UI components when available instead of custom HTML elements
- Leverage MUI's sx prop for component-specific styling
- Use MUI's breakpoint system for responsive design
- Follow MUI's composition patterns and API design principles
- Prefer MUI's built-in variants and color schemes

## Layout & Styling Rules

### Container Usage

- **NEVER hard-code max widths for standard page content**
- MainLayout wraps all children in `<Container>` - use this consistently
- Only override container behavior for special full-width scenarios (like game boards)
- Remove any hardcoded widths like `maxWidth: '800px'` - let Container handle responsive layout

### Theme-First Approach

- **Material-UI theme and components should do the heavy lifting**
- If you need `sx={{}}` on every component, you're probably doing it wrong
- Define reusable styles, spacing, and variants in `src/lib/theme.ts`
- Use theme breakpoints, palette, spacing, and typography consistently
- Minimize custom `sx` props - leverage MUI's built-in design system

### Animation Guidelines

- Use CSS keyframes for smooth entrance animations (board, pieces, UI elements)
- Implement proper timing with `cubic-bezier` easing for natural movement
- Coordinate multi-element animations with staggered delays
- Always provide animation disable options via `skipAnimation` props
- Keep animations under 2 seconds for good UX

### Component Styling

- Use MUI's sx prop for component-specific styles
- Leverage theme values: `theme.spacing()`, `theme.palette.*`, `theme.breakpoints.*`
- Avoid inline styles - prefer sx prop or styled components for complex styling

## State Management & Data Fetching

### Firebase Integration

- Use Firebase hooks for real-time data subscriptions:
  - `useMatchSessionRealtime()` - live match data with real-time updates
  - `useUserMatchesRealtime()` - user's match list with live updates
  - Custom Firestore listeners for game state changes
- Configure proper error handling and loading states
- Implement efficient cache management with Firebase offline persistence

### Real-time Features

- Leverage Firestore's real-time listeners for live game updates
- Handle connection states and offline scenarios gracefully
- Use optimistic updates for better UX while maintaining server authority
- Implement proper cleanup of listeners to prevent memory leaks

### Custom Hooks

- Create reusable hooks that wrap Firebase operations:
  - `useAuth()` - authentication state management
  - `useLocalGame()` - local demo game logic
  - `useBreakpoints()` - responsive design utilities

## Database & Firestore

### Data Structure

- Use Firestore collections for matches, games, and users
- Implement proper security rules in `firestore.rules`
- Structure data for efficient querying and real-time updates
- Use subcollections for nested data like game moves

### Type Safety

- Always use TypeScript interfaces for Firestore data
- Create proper types in `src/types/` for all game entities
- Use Firebase's TypeScript helpers for consistent data schemas
- Implement proper error handling for Firestore operations

### Performance

- Use compound queries efficiently
- Implement pagination for large datasets
- Be mindful of read/write costs
- Utilize Firestore's offline capabilities

## Authentication & Security

### NextAuth.js v5 with Firebase

- Follow NextAuth.js v5 patterns (handlers, not pages)
- Use Firebase Auth providers (Discord, Google, etc.)
- Implement proper session management and user context
- Use the `useAuth()` hook for authentication state

### Data Validation

- Validate all user inputs before Firestore operations
- Use Zod or similar for runtime type validation
- Never expose sensitive Firebase config in client components
- Implement proper Firestore security rules

## Game Logic

### Move Validation

- Always validate moves server-side using Firebase Cloud Functions
- Implement proper turn management and game state validation
- Store board state efficiently in Firestore documents
- Use transaction writes for atomic game state updates

### Diamond Chess Specifics

- Handle 45¬∞ coordinate system transformation correctly
- Implement proper pawn movement rules (NW/NE for white, SW/SE for black)
- Use the coordinate conversion system in `src/lib/game/coordinates.ts`
- Store move history with proper notation for the diamond board

### Visual Feedback

- Implement subtle highlighting for last moved pieces (warning colors)
- Show turn indicators for all users (players and spectators)
- Use animations for board entrance and piece movements
- Provide clear visual feedback for game states (check, checkmate, etc.)

## File Organization

### Structure

- Keep game logic in `src/lib/game/`
- Place reusable hooks in `src/hooks/`
- Store types in `src/types/`
- Use barrel exports (index.ts) for clean imports
- Keep Firebase configuration in `src/lib/firebase.ts`

### Naming Conventions

- Use PascalCase for component files and React components
- Use camelCase for hooks, utilities, and variables
- Use descriptive names that reflect the chess/game domain
- Prefix Firebase-related files clearly

## Code Quality

### React Best Practices

- Follow React Rules: components and hooks must be pure
- Use proper dependency arrays in useEffect and useMemo
- Implement proper error boundaries for game state errors
- Use React.memo() for expensive components that re-render frequently
- Maximize parallel tool calls where possible for better performance

### TypeScript

- Enable strict mode and maintain 100% type coverage
- Use discriminated unions for game states (pending, in-progress, completed)
- Create proper interfaces for game moves, board state, and user actions
- Avoid `any` type - use proper type assertions or unknown

### Performance

- Implement code splitting for large components
- Use dynamic imports for heavy dependencies
- Optimize re-renders with proper memoization
- Use Firestore's built-in caching effectively

## Mobile & Responsive Design

### Touch Interactions

- Implement proper touch handlers for mobile chess piece movement
- Use larger touch targets (44px minimum) for mobile pieces
- Disable HTML5 drag on mobile in favor of touch events
- Prevent scroll interference during piece dragging

### Responsive Layout

- Use MUI's breakpoint system consistently
- Optimize board size and piece sizing for mobile
- Adjust player card layouts for different screen sizes
- Test on various devices and orientations

## Development Workflow

### Version Control

- Use feature branches and descriptive commit messages
- Include emoji prefixes for commit types (‚ú® features, üêõ fixes, üé® styling)
- Keep commits focused and atomic
- Test thoroughly before pushing

### Firebase Development

- Use Firebase emulators for local development
- Keep separate Firebase projects for dev/staging/prod
- Monitor Firestore usage and costs
- Regularly review and update security rules

## Analytics & Monitoring

### Chess Analytics

- Track game events using the `chessAnalytics` module
- Monitor piece movements, match creation, and user engagement
- Use Firebase Analytics for user behavior insights
- Implement error tracking and performance monitoring

## Production Considerations

### Deployment

- Optimize bundle size with proper code splitting
- Configure Firebase hosting for optimal performance
- Set up proper error boundaries and fallbacks
- Monitor real-time database connections and costs

### Security

- Regularly audit Firestore security rules
- Implement rate limiting for game actions
- Validate all server-side operations
- Monitor for suspicious gaming patterns

## Project Status

This Diamond Chess project is feature-complete with:

- ‚úÖ Real-time multiplayer gameplay
- ‚úÖ Beautiful diamond board with animations
- ‚úÖ Mobile-optimized touch controls
- ‚úÖ User authentication and match management
- ‚úÖ Spectator mode and match history
- ‚úÖ Modern UI with Material-UI v5
- ‚úÖ Production-ready Firebase integration
