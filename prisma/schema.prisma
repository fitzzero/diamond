// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core Application Models
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  name          String?
  discordId     String?   @unique @map("discord_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  matchesAsP1   Match[]   @relation("MatchPlayer1")
  matchesAsP2   Match[]   @relation("MatchPlayer2")
  gamesAsWhite  Game[]    @relation("GameWhitePlayer")
  gamesAsBlack  Game[]    @relation("GameBlackPlayer")
  wonMatches    Match[]   @relation("MatchWinner")

  @@map("users")
}

model Match {
  id        String      @id @default(cuid())
  status    MatchStatus @default(WAITING_FOR_PLAYER)
  player1Id String      @map("player1_id")
  player2Id String?     @map("player2_id")
  winnerId  String?     @map("winner_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  player1 User  @relation("MatchPlayer1", fields: [player1Id], references: [id])
  player2 User? @relation("MatchPlayer2", fields: [player2Id], references: [id])
  winner  User? @relation("MatchWinner", fields: [winnerId], references: [id])
  games   Game[]

  @@map("matches")
}

model Game {
  id          String     @id @default(cuid())
  matchId     String     @map("match_id")
  gameNumber  Int        @map("game_number") // For potential best-of-X matches
  status      GameStatus @default(IN_PROGRESS)
  currentTurn PieceColor @default(WHITE) @map("current_turn")
  
  // Board state stored as JSON
  board       Json       @default("{\"pieces\": [], \"lastMove\": null}")
  moveHistory Json       @default("[]") @map("move_history")
  
  // Player assignments (can swap between games)
  whitePlayerId String @map("white_player_id")
  blackPlayerId String @map("black_player_id")
  
  // Game metadata
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  result      GameResult?
  
  // Relations
  match       Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  whitePlayer User  @relation("GameWhitePlayer", fields: [whitePlayerId], references: [id])
  blackPlayer User  @relation("GameBlackPlayer", fields: [blackPlayerId], references: [id])

  @@unique([matchId, gameNumber])
  @@map("games")
}

// Enums
enum MatchStatus {
  WAITING_FOR_PLAYER
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum GameStatus {
  IN_PROGRESS
  CHECKMATE
  STALEMATE
  DRAW
  RESIGNATION
  TIMEOUT
}

enum PieceColor {
  WHITE
  BLACK
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
} 